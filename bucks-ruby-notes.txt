Buck's Ruby Notes

Environment
  Interpreters
    irb is the standard console interpreter
    pry is an alternative that does nice formatting and color-coding of Ruby objects
    
Outputting for testing, debugging, diagnostics
  print is simplest: outputs string to console, returns nil
  puts is next simplest: outputs string to console with a newline, returns nil
  p gives the most info for debugging: it outputs results of call to inspect, and returns the evaluated code
  
Getting Input from Console
  puts 'Hello there, what\' your name?'
  name = gets.chomp
  puts 'Hello, ' + name + '!'
  
Basic Syntax

  Comments
  
    # This is a comment
    # Most people do multiline comments like
    # this.
    
    =begin
    Multiline comments can be put between =begin and =end, but not many people do this
    =end

  Semicolons
    Not needed (and it's typically considered good style not to use them),
    unless two statements are on the same line, then they need to be separated by a semicolon
    
  Quotes
    Single quotes and double quotes are the same except:
    - Double quotes must be used if you're doing string interpolation: "Hello #{world_name}"
    - Double quotes must be used when escaping characters: 'a\nb' evaluates to string a\nb; "a\nb" evaluates to a, newline, b
      - Except that you can use single quotes to escape single quotes: 'you\'re'
  
  Variables
  
    Assignment
      composer = 'Mozart'
      composer_age = cur_year - composer_yob
      
  Flow Control
  
    if name == 'Buck'
      puts 'Hello Mr. Melton'
    end
    
    if name == 'Buck'
      puts 'Hello Mr. Melton'
    else
      puts 'Who are you, stranger?'
    end
    
    if name == 'Buck'
      puts "Howdy pardner."
    elsif name == 'Katie'
      puts 'What a lovely name!'
    end
    
    while input != 'bye'
      puts 'Enter:'
      input = gets.chomp
    end
    
    break   
    next    # like 'continue' in other languages
    
  Data Structures
  
    Array
      Create New Array
        langs = ['English', 'Hawaiian', 'Portuguese']
        array_2 = [] # create empty array
        array_2 = Array.new # same, creates empty array
        
      Methods on Array
        #length
        #reverse
        #each
          langs.each do |lang|
            puts 'I love ' + lang
          end
        
          Alternatively:
            langs.each {|lang| puts 'I love ' + lang}
            
        #join
          puts langs.join(' - ') # Yields 'English - Hawaiian - Portuguese'
          
        #push
        # pushes element onto end of array
        
        #pop
        # pops the last elemnet of the array
        
        #last
        # returns the last element of the array, but leaves the array untouched 
        
    Hash
      Create new hash
        my_hash = {}  # creates empty hash
        my_hash = Hash.new  # same, creates empty hash
        currency_hash = { 'United States': 'dollar',
                          'Canada': 'dollar',
                          'Great Britain': 'pound',
                          'Brazil': 'real'
                        }
        
      Methods on Hash
        
      
  Methods
  
    Defining a Mathod
  
      def method_name (arg1, arg2, arg3) # parens optional
        # method body here
      end
    
    Calling
    
      object.method_name(arg1val, arg2val, arg3 val)
      
      Note many things we think of as 'operators' are methods
        Arithmetic operators:
          5 + 5 is just a shortcut for 5.+ 5 where "+" is a method on Integer
          6 * 4 is just a shortcut for 6.* 4 where "*" is a method on Integer
        Array operator:
          arr[2] is just a shortcut for arr.[] 2
        
    Return values
      Methods return the last expression evaluated in the method (which can be an explicity 'return', but doesn't have to be).
        
    Iterators
      #each
      #times
        3.times do
          puts 'Hip Hip Hooray! '
        end
        
        Alternatively:
          3.times { puts 'Hip Hip Hooray! '}
    
      
Data Conversion

  Integer to Float: two ways: Float(3); 3.to_f
    I don't know why the 3.to_f works.  to_f is not a method on Integer or any of its ancestors, nor on the module Kernel.
    
Files and Directories

  Write to a file:
    filename = 'buck.txt'
    test_string = 'This is a test file.'
    
    File.open filename, 'w' do |f|
      f.write test_string
    end
  
  Read from a file:
    read_string = File.read filename
    
  Find all files in a directory:
    my_files = Dir['*.jpg'] # returns an array of the matching filenames
    
  Dir.chdir(new_path) # change directory
  File.rename(new_path_or_name) # rename/move file
  
Objects

  Creating a new object
    Usually use the 'new' method:
    
    alpha = Array.new # creates empty array
    beta = String.new # creates empty string
    now = Time.new # current date and time
    
    We can also create a new Array using an array literal: new_array = ['Buck', 'Ron', 'Gifford']
    We can also create a new String using a string literal: new_string = 'Buck'
    
Classes

  String
  
    Methods
    
      length
      reverse
      
      upcase
      downcase
      swapcase
      capitalize
      
      center(line_width)
      ljust(line_width)
      rjust(line_width)
      
  Number
    abs
    
  Random
    rand # just calling rand returns float >= 0 and < 1.
    rand(int) # returns integer >= 0 and < int.
    
  Math
    Math::PI
    Math::E
    Math.cos
    Math.tan
    Math.log
    Math.sqrt
      

